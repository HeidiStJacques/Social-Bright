"""create users table

Revision ID: 78ce756e993a
Revises: 610517574cfd
Create Date: 2025-07-14 15:55:52.943267

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '78ce756e993a'
down_revision: Union[str, Sequence[str], None] = '610517574cfd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('roles', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('tenant_id', sa.String(), nullable=True),
    sa.Column('tenant_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='users'
    )
    op.create_index(op.f('ix_users_users_email'), 'users', ['email'], unique=True, schema='users')
    op.create_index(op.f('ix_users_users_id'), 'users', ['id'], unique=False, schema='users')
    op.drop_table('case_notes')
    op.drop_table('system_settings')
    op.drop_table('eligibility')
    op.drop_table('guardians')
    op.drop_table('clients')
    op.drop_table('tenants')
    op.drop_table('documents')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('upload_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='documents_client_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='documents_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='documents_pkey')
    )
    op.create_table('tenants',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tenants_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('domain', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tenants_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('clients',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('clients_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('tenant_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('medicaid_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('mco', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('zip', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('primary_phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='clients_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='clients_pkey'),
    sa.UniqueConstraint('medicaid_id', name='clients_medicaid_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('guardians',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('relation_to_participant', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='guardians_client_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='guardians_pkey')
    )
    op.create_table('eligibility',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('eligible', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('monthly_income', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('deductions', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('redetermination_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('mea_review_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='eligibility_client_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='eligibility_pkey'),
    sa.UniqueConstraint('client_id', name='eligibility_client_id_key')
    )
    op.create_table('system_settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('key', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='system_settings_pkey'),
    sa.UniqueConstraint('key', name='system_settings_key_key')
    )
    op.create_table('case_notes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_of_contact', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('assigned_staff', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('send_notification', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('send_to_another', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('additional_staff', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('type_of_contact', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_30_day_call', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('participant_checked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('collateral_checked', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('collateral_comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contact_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('medical_conditions', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('additional_interventions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('case_note_detail', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('case_manager_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('signature', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], name='case_notes_client_id_fkey'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name='case_notes_tenant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='case_notes_pkey')
    )
    op.drop_index(op.f('ix_users_users_id'), table_name='users', schema='users')
    op.drop_index(op.f('ix_users_users_email'), table_name='users', schema='users')
    op.drop_table('users', schema='users')
    # ### end Alembic commands ###
